// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="exchangeFivetuple_exchangeFivetuple,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4,HLS_SYN_LUT=47,HLS_VERSION=2022_2}" *)

module exchangeFivetuple (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        user_extern_in_TDATA,
        user_extern_in_TVALID,
        user_extern_in_TREADY,
        user_extern_out_TDATA,
        user_extern_out_TVALID,
        user_extern_out_TREADY
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] user_extern_in_TDATA;
input   user_extern_in_TVALID;
output   user_extern_in_TREADY;
output  [127:0] user_extern_out_TDATA;
output   user_extern_out_TVALID;
input   user_extern_out_TREADY;

reg ap_idle;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    user_extern_in_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    user_extern_out_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] tmp_2_fu_105_p4;
wire   [15:0] tmp3_fu_95_p4;
wire   [15:0] tmp_s_fu_85_p4;
wire   [31:0] in_extern_src_V_1_fu_71_p1;
wire   [31:0] in_extern_dst_V_fu_75_p4;
wire   [103:0] or_ln16_1_fu_115_p6;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_user_extern_in_U_apdone_blk;
wire   [127:0] user_extern_in_TDATA_int_regslice;
wire    user_extern_in_TVALID_int_regslice;
reg    user_extern_in_TREADY_int_regslice;
wire    regslice_both_user_extern_in_U_ack_in;
wire    regslice_both_user_extern_out_U_apdone_blk;
wire   [127:0] user_extern_out_TDATA_int_regslice;
reg    user_extern_out_TVALID_int_regslice;
wire    user_extern_out_TREADY_int_regslice;
wire    regslice_both_user_extern_out_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

exchangeFivetuple_regslice_both #(
    .DataWidth( 128 ))
regslice_both_user_extern_in_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(user_extern_in_TDATA),
    .vld_in(user_extern_in_TVALID),
    .ack_in(regslice_both_user_extern_in_U_ack_in),
    .data_out(user_extern_in_TDATA_int_regslice),
    .vld_out(user_extern_in_TVALID_int_regslice),
    .ack_out(user_extern_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_user_extern_in_U_apdone_blk)
);

exchangeFivetuple_regslice_both #(
    .DataWidth( 128 ))
regslice_both_user_extern_out_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(user_extern_out_TDATA_int_regslice),
    .vld_in(user_extern_out_TVALID_int_regslice),
    .ack_in(user_extern_out_TREADY_int_regslice),
    .data_out(user_extern_out_TDATA),
    .vld_out(regslice_both_user_extern_out_U_vld_out),
    .ack_out(user_extern_out_TREADY),
    .apdone_blk(regslice_both_user_extern_out_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        user_extern_in_TDATA_blk_n = user_extern_in_TVALID_int_regslice;
    end else begin
        user_extern_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        user_extern_in_TREADY_int_regslice = 1'b1;
    end else begin
        user_extern_in_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        user_extern_out_TDATA_blk_n = user_extern_out_TREADY_int_regslice;
    end else begin
        user_extern_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        user_extern_out_TVALID_int_regslice = 1'b1;
    end else begin
        user_extern_out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (user_extern_out_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((user_extern_out_TREADY_int_regslice == 1'b0) | (user_extern_in_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (user_extern_out_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((user_extern_out_TREADY_int_regslice == 1'b0) | (user_extern_in_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (user_extern_out_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((user_extern_out_TREADY_int_regslice == 1'b0) | (user_extern_in_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((user_extern_out_TREADY_int_regslice == 1'b0) | (user_extern_in_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (user_extern_out_TREADY_int_regslice == 1'b0);
end

assign ap_done = 1'b0;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = 1'b0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign in_extern_dst_V_fu_75_p4 = {{user_extern_in_TDATA_int_regslice[63:32]}};

assign in_extern_src_V_1_fu_71_p1 = user_extern_in_TDATA_int_regslice[31:0];

assign or_ln16_1_fu_115_p6 = {{{{{tmp_2_fu_105_p4}, {tmp3_fu_95_p4}}, {tmp_s_fu_85_p4}}, {in_extern_src_V_1_fu_71_p1}}, {in_extern_dst_V_fu_75_p4}};

assign tmp3_fu_95_p4 = {{user_extern_in_TDATA_int_regslice[79:64]}};

assign tmp_2_fu_105_p4 = {{user_extern_in_TDATA_int_regslice[103:96]}};

assign tmp_s_fu_85_p4 = {{user_extern_in_TDATA_int_regslice[95:80]}};

assign user_extern_in_TREADY = regslice_both_user_extern_in_U_ack_in;

assign user_extern_out_TDATA_int_regslice = or_ln16_1_fu_115_p6;

assign user_extern_out_TVALID = regslice_both_user_extern_out_U_vld_out;


reg find_kernel_block = 0;
// synthesis translate_off
`include "exchangeFivetuple_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //exchangeFivetuple

