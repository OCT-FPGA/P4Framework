-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity saveSrcDest_kernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_TVALID : IN STD_LOGIC;
    dest_TVALID : IN STD_LOGIC;
    src_out_TREADY : IN STD_LOGIC;
    dest_out_TREADY : IN STD_LOGIC;
    src_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    src_TREADY : OUT STD_LOGIC;
    dest_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    dest_TREADY : OUT STD_LOGIC;
    src_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    src_out_TVALID : OUT STD_LOGIC;
    dest_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    dest_out_TVALID : OUT STD_LOGIC );
end;


architecture behav of saveSrcDest_kernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "saveSrcDest_kernel_saveSrcDest_kernel,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=2.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.305000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=166,HLS_SYN_LUT=406,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal first_load_reg_325 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_load_reg_325_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal first_load_reg_325_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_out_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dest_out_U_apdone_blk : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal curr : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal saved_addresses_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal saved_addresses_0_ce0 : STD_LOGIC;
    signal saved_addresses_0_we0 : STD_LOGIC;
    signal saved_addresses_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal saved_addresses_0_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal saved_addresses_0_ce1 : STD_LOGIC;
    signal saved_addresses_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal saved_addresses_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal saved_addresses_1_ce0 : STD_LOGIC;
    signal saved_addresses_1_we0 : STD_LOGIC;
    signal saved_addresses_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal saved_addresses_1_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal saved_addresses_1_ce1 : STD_LOGIC;
    signal saved_addresses_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal first : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal prev : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal src_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal dest_TDATA_blk_n : STD_LOGIC;
    signal src_out_TDATA_blk_n : STD_LOGIC;
    signal dest_out_TDATA_blk_n : STD_LOGIC;
    signal first_load_load_fu_224_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln31_fu_232_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln31_reg_329 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln31_reg_329_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln2_reg_335 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln3_reg_340 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_s_fu_302_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_fu_312_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln23_fu_196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_fu_218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_172_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln34_fu_268_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln23_fu_182_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln_fu_186_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_fu_202_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1_fu_208_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln32_fu_246_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_src_U_apdone_blk : STD_LOGIC;
    signal src_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal src_TVALID_int_regslice : STD_LOGIC;
    signal src_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_src_U_ack_in : STD_LOGIC;
    signal regslice_both_dest_U_apdone_blk : STD_LOGIC;
    signal dest_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal dest_TVALID_int_regslice : STD_LOGIC;
    signal dest_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_dest_U_ack_in : STD_LOGIC;
    signal src_out_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal src_out_TVALID_int_regslice : STD_LOGIC;
    signal src_out_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_src_out_U_vld_out : STD_LOGIC;
    signal dest_out_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal dest_out_TVALID_int_regslice : STD_LOGIC;
    signal dest_out_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_dest_out_U_vld_out : STD_LOGIC;
    signal ap_condition_139 : BOOLEAN;
    signal ap_condition_193 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component saveSrcDest_kernel_mux_2_1_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component saveSrcDest_kernel_saved_addresses_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component saveSrcDest_kernel_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    saved_addresses_0_U : component saveSrcDest_kernel_saved_addresses_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => saved_addresses_0_address0,
        ce0 => saved_addresses_0_ce0,
        we0 => saved_addresses_0_we0,
        d0 => saved_addresses_0_d0,
        address1 => saved_addresses_0_address1,
        ce1 => saved_addresses_0_ce1,
        q1 => saved_addresses_0_q1);

    saved_addresses_1_U : component saveSrcDest_kernel_saved_addresses_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => saved_addresses_1_address0,
        ce0 => saved_addresses_1_ce0,
        we0 => saved_addresses_1_we0,
        d0 => saved_addresses_1_d0,
        address1 => saved_addresses_1_address1,
        ce1 => saved_addresses_1_ce1,
        q1 => saved_addresses_1_q1);

    mux_2_1_32_1_1_U1 : component saveSrcDest_kernel_mux_2_1_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => saved_addresses_0_q1,
        din1 => saved_addresses_1_q1,
        din2 => trunc_ln31_reg_329_pp0_iter1_reg,
        dout => p_s_fu_302_p4);

    mux_2_1_32_1_1_U2 : component saveSrcDest_kernel_mux_2_1_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => saved_addresses_1_q1,
        din1 => saved_addresses_0_q1,
        din2 => trunc_ln31_reg_329_pp0_iter1_reg,
        dout => p_1_fu_312_p4);

    regslice_both_src_U : component saveSrcDest_kernel_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TDATA,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_U_ack_in,
        data_out => src_TDATA_int_regslice,
        vld_out => src_TVALID_int_regslice,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_U_apdone_blk);

    regslice_both_dest_U : component saveSrcDest_kernel_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => dest_TDATA,
        vld_in => dest_TVALID,
        ack_in => regslice_both_dest_U_ack_in,
        data_out => dest_TDATA_int_regslice,
        vld_out => dest_TVALID_int_regslice,
        ack_out => dest_TREADY_int_regslice,
        apdone_blk => regslice_both_dest_U_apdone_blk);

    regslice_both_src_out_U : component saveSrcDest_kernel_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_out_TDATA_int_regslice,
        vld_in => src_out_TVALID_int_regslice,
        ack_in => src_out_TREADY_int_regslice,
        data_out => src_out_TDATA,
        vld_out => regslice_both_src_out_U_vld_out,
        ack_out => src_out_TREADY,
        apdone_blk => regslice_both_src_out_U_apdone_blk);

    regslice_both_dest_out_U : component saveSrcDest_kernel_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => dest_out_TDATA_int_regslice,
        vld_in => dest_out_TVALID_int_regslice,
        ack_in => dest_out_TREADY_int_regslice,
        data_out => dest_out_TDATA,
        vld_out => regslice_both_dest_out_U_vld_out,
        ack_out => dest_out_TREADY,
        apdone_blk => regslice_both_dest_out_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (first_load_load_fu_224_p1 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (first_load_load_fu_224_p1 = ap_const_lv1_0)))) then
                curr <= grp_fu_172_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (first_load_load_fu_224_p1 = ap_const_lv1_1))) then
                first <= ap_const_lv1_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                first_load_reg_325 <= first;
                first_load_reg_325_pp0_iter1_reg <= first_load_reg_325;
                trunc_ln31_reg_329_pp0_iter1_reg <= trunc_ln31_reg_329;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                first_load_reg_325_pp0_iter2_reg <= first_load_reg_325_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (first_load_load_fu_224_p1 = ap_const_lv1_0))) then
                lshr_ln2_reg_335 <= prev(7 downto 1);
                lshr_ln3_reg_340 <= add_ln32_fu_246_p2(7 downto 1);
                trunc_ln31_reg_329 <= trunc_ln31_fu_232_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (first_load_load_fu_224_p1 = ap_const_lv1_0))) then
                prev <= add_ln34_fu_268_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln24_fu_202_p2 <= std_logic_vector(unsigned(curr) + unsigned(ap_const_lv8_1));
    add_ln32_fu_246_p2 <= std_logic_vector(unsigned(prev) + unsigned(ap_const_lv8_1));
    add_ln34_fu_268_p2 <= std_logic_vector(unsigned(prev) + unsigned(ap_const_lv8_2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, first_load_reg_325_pp0_iter1_reg, first_load_reg_325_pp0_iter2_reg, regslice_both_src_out_U_apdone_blk, regslice_both_dest_out_U_apdone_blk, src_TVALID_int_regslice, dest_TVALID_int_regslice, src_out_TREADY_int_regslice, dest_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((regslice_both_dest_out_U_apdone_blk = ap_const_logic_1) or (regslice_both_src_out_U_apdone_blk = ap_const_logic_1) or ((first_load_reg_325_pp0_iter2_reg = ap_const_lv1_1) and (dest_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter2_reg = ap_const_lv1_1) and (src_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter2_reg = ap_const_lv1_0) and (dest_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter2_reg = ap_const_lv1_0) and (src_out_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_1) and (dest_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_1) and (src_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_0) and (dest_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter1_reg 
    = ap_const_lv1_0) and (src_out_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_start = ap_const_logic_1) and ((dest_TVALID_int_regslice = ap_const_logic_0) or (src_TVALID_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, first_load_reg_325_pp0_iter1_reg, ap_block_state3_io, first_load_reg_325_pp0_iter2_reg, regslice_both_src_out_U_apdone_blk, regslice_both_dest_out_U_apdone_blk, ap_block_state4_io, src_TVALID_int_regslice, dest_TVALID_int_regslice, src_out_TREADY_int_regslice, dest_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((regslice_both_dest_out_U_apdone_blk = ap_const_logic_1) or (regslice_both_src_out_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state4_io) or ((first_load_reg_325_pp0_iter2_reg = ap_const_lv1_1) and (dest_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter2_reg = ap_const_lv1_1) and (src_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter2_reg = ap_const_lv1_0) and (dest_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter2_reg = ap_const_lv1_0) and (src_out_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_1) and (dest_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_1) and (src_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_0) 
    and (dest_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_0) and (src_out_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_start = ap_const_logic_1) and ((dest_TVALID_int_regslice = ap_const_logic_0) or (src_TVALID_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, first_load_reg_325_pp0_iter1_reg, ap_block_state3_io, first_load_reg_325_pp0_iter2_reg, regslice_both_src_out_U_apdone_blk, regslice_both_dest_out_U_apdone_blk, ap_block_state4_io, src_TVALID_int_regslice, dest_TVALID_int_regslice, src_out_TREADY_int_regslice, dest_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((regslice_both_dest_out_U_apdone_blk = ap_const_logic_1) or (regslice_both_src_out_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state4_io) or ((first_load_reg_325_pp0_iter2_reg = ap_const_lv1_1) and (dest_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter2_reg = ap_const_lv1_1) and (src_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter2_reg = ap_const_lv1_0) and (dest_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter2_reg = ap_const_lv1_0) and (src_out_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_1) and (dest_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_1) and (src_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_0) 
    and (dest_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_0) and (src_out_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_start = ap_const_logic_1) and ((dest_TVALID_int_regslice = ap_const_logic_0) or (src_TVALID_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(src_TVALID_int_regslice, dest_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((dest_TVALID_int_regslice = ap_const_logic_0) or (src_TVALID_int_regslice = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(first_load_reg_325_pp0_iter1_reg, src_out_TREADY_int_regslice, dest_out_TREADY_int_regslice)
    begin
                ap_block_state3_io <= (((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_1) and (dest_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_1) and (src_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_0) and (dest_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_0) and (src_out_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(first_load_reg_325_pp0_iter1_reg, src_out_TREADY_int_regslice, dest_out_TREADY_int_regslice)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_1) and (dest_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_1) and (src_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_0) and (dest_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_0) and (src_out_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state4_io_assign_proc : process(first_load_reg_325_pp0_iter2_reg, src_out_TREADY_int_regslice, dest_out_TREADY_int_regslice)
    begin
                ap_block_state4_io <= (((first_load_reg_325_pp0_iter2_reg = ap_const_lv1_1) and (dest_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter2_reg = ap_const_lv1_1) and (src_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter2_reg = ap_const_lv1_0) and (dest_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter2_reg = ap_const_lv1_0) and (src_out_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(first_load_reg_325_pp0_iter2_reg, regslice_both_src_out_U_apdone_blk, regslice_both_dest_out_U_apdone_blk, src_out_TREADY_int_regslice, dest_out_TREADY_int_regslice)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((regslice_both_dest_out_U_apdone_blk = ap_const_logic_1) or (regslice_both_src_out_U_apdone_blk = ap_const_logic_1) or ((first_load_reg_325_pp0_iter2_reg = ap_const_lv1_1) and (dest_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter2_reg = ap_const_lv1_1) and (src_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter2_reg = ap_const_lv1_0) and (dest_out_TREADY_int_regslice = ap_const_logic_0)) or ((first_load_reg_325_pp0_iter2_reg = ap_const_lv1_0) and (src_out_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_condition_139_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
                ap_condition_139 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_193_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, first_load_reg_325, ap_block_pp0_stage0)
    begin
                ap_condition_193 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (first_load_reg_325 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    dest_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, dest_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dest_TDATA_blk_n <= dest_TVALID_int_regslice;
        else 
            dest_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dest_TREADY <= regslice_both_dest_U_ack_in;

    dest_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dest_TREADY_int_regslice <= ap_const_logic_1;
        else 
            dest_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    dest_out_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, first_load_reg_325_pp0_iter1_reg, first_load_reg_325_pp0_iter2_reg, ap_block_pp0_stage0, dest_out_TREADY_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (first_load_reg_325_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (first_load_reg_325_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (first_load_reg_325_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (first_load_reg_325_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            dest_out_TDATA_blk_n <= dest_out_TREADY_int_regslice;
        else 
            dest_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dest_out_TDATA_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter2, first_load_reg_325_pp0_iter1_reg, p_1_fu_312_p4, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
            if ((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_1)) then 
                dest_out_TDATA_int_regslice <= ap_const_lv32_0;
            elsif ((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_0)) then 
                dest_out_TDATA_int_regslice <= p_1_fu_312_p4;
            else 
                dest_out_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            dest_out_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    dest_out_TVALID <= regslice_both_dest_out_U_vld_out;

    dest_out_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter2, first_load_reg_325_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (first_load_reg_325_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (first_load_reg_325_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            dest_out_TVALID_int_regslice <= ap_const_logic_1;
        else 
            dest_out_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    first_load_load_fu_224_p1 <= first;
    grp_fu_172_p2 <= std_logic_vector(unsigned(curr) + unsigned(ap_const_lv8_2));
    lshr_ln1_fu_208_p4 <= add_ln24_fu_202_p2(7 downto 1);
    lshr_ln_fu_186_p4 <= curr(7 downto 1);

    saved_addresses_0_address0_assign_proc : process(zext_ln23_fu_196_p1, zext_ln24_fu_218_p1, trunc_ln23_fu_182_p1, ap_condition_139)
    begin
        if ((ap_const_boolean_1 = ap_condition_139)) then
            if ((trunc_ln23_fu_182_p1 = ap_const_lv1_1)) then 
                saved_addresses_0_address0 <= zext_ln24_fu_218_p1(7 - 1 downto 0);
            elsif ((trunc_ln23_fu_182_p1 = ap_const_lv1_0)) then 
                saved_addresses_0_address0 <= zext_ln23_fu_196_p1(7 - 1 downto 0);
            else 
                saved_addresses_0_address0 <= "XXXXXXX";
            end if;
        else 
            saved_addresses_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    saved_addresses_0_address1_assign_proc : process(trunc_ln31_reg_329, zext_ln31_fu_292_p1, zext_ln32_fu_297_p1, ap_condition_193)
    begin
        if ((ap_const_boolean_1 = ap_condition_193)) then
            if ((trunc_ln31_reg_329 = ap_const_lv1_1)) then 
                saved_addresses_0_address1 <= zext_ln32_fu_297_p1(7 - 1 downto 0);
            elsif ((trunc_ln31_reg_329 = ap_const_lv1_0)) then 
                saved_addresses_0_address1 <= zext_ln31_fu_292_p1(7 - 1 downto 0);
            else 
                saved_addresses_0_address1 <= "XXXXXXX";
            end if;
        else 
            saved_addresses_0_address1 <= "XXXXXXX";
        end if; 
    end process;


    saved_addresses_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, trunc_ln23_fu_182_p1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (trunc_ln23_fu_182_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (trunc_ln23_fu_182_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            saved_addresses_0_ce0 <= ap_const_logic_1;
        else 
            saved_addresses_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    saved_addresses_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, first_load_reg_325, ap_block_pp0_stage0_11001, trunc_ln31_reg_329)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (first_load_reg_325 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln31_reg_329 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (first_load_reg_325 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln31_reg_329 = ap_const_lv1_0)))) then 
            saved_addresses_0_ce1 <= ap_const_logic_1;
        else 
            saved_addresses_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    saved_addresses_0_d0_assign_proc : process(trunc_ln23_fu_182_p1, src_TDATA_int_regslice, dest_TDATA_int_regslice, ap_condition_139)
    begin
        if ((ap_const_boolean_1 = ap_condition_139)) then
            if ((trunc_ln23_fu_182_p1 = ap_const_lv1_1)) then 
                saved_addresses_0_d0 <= dest_TDATA_int_regslice;
            elsif ((trunc_ln23_fu_182_p1 = ap_const_lv1_0)) then 
                saved_addresses_0_d0 <= src_TDATA_int_regslice;
            else 
                saved_addresses_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            saved_addresses_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    saved_addresses_0_we0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, trunc_ln23_fu_182_p1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (trunc_ln23_fu_182_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (trunc_ln23_fu_182_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            saved_addresses_0_we0 <= ap_const_logic_1;
        else 
            saved_addresses_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    saved_addresses_1_address0_assign_proc : process(zext_ln23_fu_196_p1, zext_ln24_fu_218_p1, trunc_ln23_fu_182_p1, ap_condition_139)
    begin
        if ((ap_const_boolean_1 = ap_condition_139)) then
            if ((trunc_ln23_fu_182_p1 = ap_const_lv1_0)) then 
                saved_addresses_1_address0 <= zext_ln24_fu_218_p1(7 - 1 downto 0);
            elsif ((trunc_ln23_fu_182_p1 = ap_const_lv1_1)) then 
                saved_addresses_1_address0 <= zext_ln23_fu_196_p1(7 - 1 downto 0);
            else 
                saved_addresses_1_address0 <= "XXXXXXX";
            end if;
        else 
            saved_addresses_1_address0 <= "XXXXXXX";
        end if; 
    end process;


    saved_addresses_1_address1_assign_proc : process(trunc_ln31_reg_329, zext_ln31_fu_292_p1, zext_ln32_fu_297_p1, ap_condition_193)
    begin
        if ((ap_const_boolean_1 = ap_condition_193)) then
            if ((trunc_ln31_reg_329 = ap_const_lv1_0)) then 
                saved_addresses_1_address1 <= zext_ln32_fu_297_p1(7 - 1 downto 0);
            elsif ((trunc_ln31_reg_329 = ap_const_lv1_1)) then 
                saved_addresses_1_address1 <= zext_ln31_fu_292_p1(7 - 1 downto 0);
            else 
                saved_addresses_1_address1 <= "XXXXXXX";
            end if;
        else 
            saved_addresses_1_address1 <= "XXXXXXX";
        end if; 
    end process;


    saved_addresses_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, trunc_ln23_fu_182_p1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (trunc_ln23_fu_182_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (trunc_ln23_fu_182_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            saved_addresses_1_ce0 <= ap_const_logic_1;
        else 
            saved_addresses_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    saved_addresses_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, first_load_reg_325, ap_block_pp0_stage0_11001, trunc_ln31_reg_329)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (first_load_reg_325 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln31_reg_329 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (first_load_reg_325 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln31_reg_329 = ap_const_lv1_0)))) then 
            saved_addresses_1_ce1 <= ap_const_logic_1;
        else 
            saved_addresses_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    saved_addresses_1_d0_assign_proc : process(trunc_ln23_fu_182_p1, src_TDATA_int_regslice, dest_TDATA_int_regslice, ap_condition_139)
    begin
        if ((ap_const_boolean_1 = ap_condition_139)) then
            if ((trunc_ln23_fu_182_p1 = ap_const_lv1_0)) then 
                saved_addresses_1_d0 <= dest_TDATA_int_regslice;
            elsif ((trunc_ln23_fu_182_p1 = ap_const_lv1_1)) then 
                saved_addresses_1_d0 <= src_TDATA_int_regslice;
            else 
                saved_addresses_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            saved_addresses_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    saved_addresses_1_we0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, trunc_ln23_fu_182_p1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (trunc_ln23_fu_182_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (trunc_ln23_fu_182_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            saved_addresses_1_we0 <= ap_const_logic_1;
        else 
            saved_addresses_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    src_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, src_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_TDATA_blk_n <= src_TVALID_int_regslice;
        else 
            src_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    src_TREADY <= regslice_both_src_U_ack_in;

    src_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_TREADY_int_regslice <= ap_const_logic_1;
        else 
            src_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    src_out_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, first_load_reg_325_pp0_iter1_reg, first_load_reg_325_pp0_iter2_reg, ap_block_pp0_stage0, src_out_TREADY_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (first_load_reg_325_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (first_load_reg_325_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (first_load_reg_325_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (first_load_reg_325_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            src_out_TDATA_blk_n <= src_out_TREADY_int_regslice;
        else 
            src_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_out_TDATA_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter2, first_load_reg_325_pp0_iter1_reg, p_s_fu_302_p4, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
            if ((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_1)) then 
                src_out_TDATA_int_regslice <= ap_const_lv32_0;
            elsif ((first_load_reg_325_pp0_iter1_reg = ap_const_lv1_0)) then 
                src_out_TDATA_int_regslice <= p_s_fu_302_p4;
            else 
                src_out_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            src_out_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    src_out_TVALID <= regslice_both_src_out_U_vld_out;

    src_out_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter2, first_load_reg_325_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (first_load_reg_325_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (first_load_reg_325_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            src_out_TVALID_int_regslice <= ap_const_logic_1;
        else 
            src_out_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln23_fu_182_p1 <= curr(1 - 1 downto 0);
    trunc_ln31_fu_232_p1 <= prev(1 - 1 downto 0);
    zext_ln23_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_186_p4),64));
    zext_ln24_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_208_p4),64));
    zext_ln31_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_reg_335),64));
    zext_ln32_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln3_reg_340),64));
end behav;
